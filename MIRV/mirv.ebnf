program      -> { definition } .

definition   -> "scope" ( funcdef | procdef | vardef ) .

funcdef      -> "func" "typename" "identifier" "(" [ formalparams ] ")"  "=" "{" { statement } "}" .

procdef      -> "proc" "identifier" "(" [ formalparams ] ")"  "=" "{" { statement } "}" .

vardef       -> "typename" "identifier" "=" expression ";". 

statement    -> definition 
              | ( expression | cond | while | set | rpn | call | return ) ";" .

expression   -> term { "infixop" expression } .

term         -> "literal" 
              | prebinding 
              | indexable [ "[" expression "]" ] .

indexable    -> "identifier" 
              | "apply" ( "identifier" | "fnkw" ) "(" [ actualparams ] ")" 
              | "prefixop" expression 
              | "(" expression ")" .

formalparams -> "typename" "identifier" [ "," formalparams ] .

actualparams -> [ "@" "identifier" "=" ] expression [ "," actualparams ] .

prebinding   -> "prebind" "identifier" "(" actualparams ")" .

cond        -> "cond" "{" { "(" expression ")" "{" { statement } "}" } "}" .

while       -> "while" "(" expression ")" "{" { statement } "}" .

set         -> "set" "identifier" "=" expression .

rpn         -> "rpn" { "identifier" | "infixop" | "prefixop" | "fnkw" | "opkw" | "literal" } . 

call        -> "call" ( "identifier" | "prockw" ) "(" [ actualparams ] ")" .

return      -> "return" expression . 
