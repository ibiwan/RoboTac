program      -> { definition } .

definition   -> "scope" ( funcdef | procdef | vardef ) .

funcdef      -> "func" "typename" "identifier" "(" [ formalparams ] ")"  "=" block .

procdef      -> "proc" "identifier" "(" [ formalparams ] ")"  "=" block .

vardef       -> "typename" "identifier" "=" expression ";". 

formalparams -> "typename" "identifier" [ "," formalparams ] .

block        -> "{" { statement } "}"

statement    -> definition 
              | cond
              | while
              | call ";" 
              | "rpn" { rpnelement } ";" 
              | expression ";" 
              | "set" "identifier" "=" expression ";" 
              | "return" expression  ";" .

cond         -> "cond" "{" { "(" expression ")" block .

while_s      -> "while" "(" expression ")" block .

call         -> ( "tcall" | "call" ) ( "identifier" | "prockw" ) "(" [ actualparams ] ")" .

rpnelement   -> "identifier" | "infixop" | "prefixop" | "fnkw" | "opkw" | "literal" . 

actualparams -> [ "@" "identifier" "=" ] expression [ "," actualparams ] .

expression   -> term { "infixop" expression } .

term         -> "literal" 
              | prebinding
              | indexable [ "[" expression "]" ] .

prebinding   -> "prebind" "identifier" "(" actualparams ")" .

indexable    -> "identifier" 
              | "prefixop" expression 
              | "apply" ( "identifier" | "fnkw" ) "(" [ actualparams ] ")" 
              | "(" expression ")" .
